export const CHAIN_ID = 100; // Gnosis Chain
export const RPC_URL = "https://rpc.gnosis.gateway.fm";
export const EXPLORER_URL = "https://gnosisscan.io";

/** 1inch Limit Order Protocol v4 (Gnosis) - HARDCODED */
export const LOP_V4_GNOSIS = "0x111111125421ca6dc452d289314280a0f8842a65" as const;


/** Core contracts - HARDCODED */
export const VAULT_ADDRESS = "0x42AD721db31C6eb65d8332BF0F7E26bff1eB9f6b" as const;
export const CALLTOKEN_ADDRESS = "0x25D2203b0e4908594009A6e18b175f5996b08375" as const;

/** ERC-1155 proxy - HARDCODED */
export const ERC1155_PROXY_ADDRESS = "0x5EaF7a20901e87FD60E4414E82C1c7e58903F713" as const;

/** Oracle for GNO/WXDAI - HARDCODED */
export const ORACLE_GNO_WXDAI = "0x25bF72c741Ea8833154AC093f341D0A6434278d2" as const;

/** Token addresses - HARDCODED */
export const TOKEN_ADDRESSES = {
  WXDAI: "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d" as const,
  USDC: "0x2a22f9c3b484c3629090FeED35F17Ff8F88f76F0" as const,
  WETH: "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1" as const,
  GNO: "0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb" as const,
};

/* --------------------------------- ABIs ---------------------------------- */
/** OptionsVault ABI (subset focused on what the app calls/reads) */
export const vaultAbi = [
  // constructor
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [
      { name: "underlying", type: "address" },
      { name: "ct", type: "address" },
      { name: "admin", type: "address" },
    ],
  },

  // AccessControl + roles
  {
    type: "function",
    stateMutability: "view",
    name: "hasRole",
    inputs: [
      { name: "role", type: "bytes32" },
      { name: "account", type: "address" },
    ],
    outputs: [{ name: "", type: "bool" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "SERIES_ADMIN_ROLE",
    inputs: [],
    outputs: [{ name: "", type: "bytes32" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [{ name: "", type: "bytes32" }],
  },

  // Series management
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "defineSeries",
    inputs: [
      { name: "underlying", type: "address" },
      { name: "underlyingDecimals", type: "uint8" },
      { name: "strike", type: "uint256" },
      { name: "expiry", type: "uint64" },
      { name: "collateralPerOption", type: "uint256" },
      { name: "oracle", type: "address" },
    ],
    outputs: [{ name: "id", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "series",
    inputs: [{ name: "id", type: "uint256" }],
    outputs: [
      { name: "underlying", type: "address" },
      { name: "underlyingDecimals", type: "uint8" },
      { name: "strike", type: "uint256" },
      { name: "expiry", type: "uint64" },
      { name: "collateralPerOption", type: "uint256" },
      { name: "oracle", type: "address" },
      { name: "settled", type: "bool" },
    ],
  },

  // Collateral
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "deposit",
    inputs: [{ name: "amount", type: "uint256" }],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "withdraw",
    inputs: [{ name: "amount", type: "uint256" }],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "freeCollateralOf",
    inputs: [{ name: "maker", type: "address" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  // autogenerated public getters for mappings
  {
    type: "function",
    stateMutability: "view",
    name: "collateralBalance",
    inputs: [{ name: "", type: "address" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "totalLocked",
    inputs: [{ name: "", type: "address" }],
    outputs: [{ name: "", type: "uint256" }],
  },

  // Mint options
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "mintOptions",
    inputs: [
      { name: "id", type: "uint256" },
      { name: "qty", type: "uint256" },
    ],
    outputs: [],
  },

  // Settlement / exercise / reclaim
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "settleSeries",
    inputs: [{ name: "id", type: "uint256" }],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "exercise",
    inputs: [
      { name: "id", type: "uint256" },
      { name: "qty", type: "uint256" },
    ],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "reclaim",
    inputs: [{ name: "id", type: "uint256" }],
    outputs: [],
  },

  // Views for aggregates / pro-rata logic
  {
    type: "function",
    stateMutability: "view",
    name: "exerciseShareOf",
    inputs: [
      { name: "maker", type: "address" },
      { name: "id", type: "uint256" },
    ],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "reclaimableOf",
    inputs: [
      { name: "maker", type: "address" },
      { name: "id", type: "uint256" },
    ],
    outputs: [
      { name: "reclaimable", type: "uint256" },
      { name: "share", type: "uint256" },
    ],
  },

  // autogenerated getters for other public mappings
  {
    type: "function",
    stateMutability: "view",
    name: "totalLockedBySeries",
    inputs: [{ name: "", type: "uint256" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "lockedBaselineAtSettle",
    inputs: [{ name: "", type: "uint256" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "totalExerciseOut",
    inputs: [{ name: "", type: "uint256" }],
    outputs: [{ name: "", type: "uint256" }],
  },

  // Admin pause/unpause
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "pause",
    inputs: [],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "unpause",
    inputs: [],
    outputs: [],
  },

  // Immutable accessors
  {
    type: "function",
    stateMutability: "view",
    name: "UNDERLYING",
    inputs: [],
    outputs: [{ name: "", type: "address" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "CALL_TOKEN",
    inputs: [],
    outputs: [{ name: "", type: "address" }],
  },

  // Events
  {
    type: "event",
    name: "SeriesDefined",
    inputs: [
      { indexed: true, name: "id", type: "uint256" },
      { indexed: true, name: "underlying", type: "address" },
      { indexed: false, name: "strike", type: "uint256" },
      { indexed: false, name: "expiry", type: "uint64" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Deposited",
    inputs: [
      { indexed: true, name: "maker", type: "address" },
      { indexed: false, name: "amount", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Withdrawn",
    inputs: [
      { indexed: true, name: "maker", type: "address" },
      { indexed: false, name: "amount", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Minted",
    inputs: [
      { indexed: true, name: "maker", type: "address" },
      { indexed: true, name: "id", type: "uint256" },
      { indexed: false, name: "qty", type: "uint256" },
      { indexed: false, name: "collateralLocked", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Settled",
    inputs: [
      { indexed: true, name: "id", type: "uint256" },
      { indexed: false, name: "priceWXDAI", type: "uint256" },
      { indexed: false, name: "inTheMoneyAtSettle", type: "bool" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Exercised",
    inputs: [
      { indexed: true, name: "holder", type: "address" },
      { indexed: true, name: "id", type: "uint256" },
      { indexed: false, name: "qty", type: "uint256" },
      { indexed: false, name: "payoffUnderlying", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ExercisePayout",
    inputs: [
      { indexed: true, name: "id", type: "uint256" },
      { indexed: true, name: "holder", type: "address" },
      { indexed: false, name: "qty", type: "uint256" },
      { indexed: false, name: "payout", type: "uint256" },
      { indexed: false, name: "totalExerciseOutAfter", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ReclaimCalculated",
    inputs: [
      { indexed: true, name: "maker", type: "address" },
      { indexed: true, name: "id", type: "uint256" },
      { indexed: false, name: "makerLockedBefore", type: "uint256" },
      { indexed: false, name: "exerciseShare", type: "uint256" },
      { indexed: false, name: "reclaimed", type: "uint256" },
      { indexed: false, name: "totalLockedBySeriesAfter", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Reclaimed",
    inputs: [
      { indexed: true, name: "maker", type: "address" },
      { indexed: true, name: "id", type: "uint256" },
      { indexed: false, name: "amount", type: "uint256" },
    ],
    anonymous: false,
  },
] as const;

/* ------------------------------ CallToken (ERC1155) ------------------------------ */
export const erc1155Abi = [
  {
    type: "function",
    stateMutability: "view",
    name: "balanceOf",
    inputs: [
      { name: "account", type: "address" },
      { name: "id", type: "uint256" },
    ],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "isApprovedForAll",
    inputs: [
      { name: "account", type: "address" },
      { name: "operator", type: "address" },
    ],
    outputs: [{ name: "", type: "bool" }],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "setApprovalForAll",
    inputs: [
      { name: "operator", type: "address" },
      { name: "approved", type: "bool" },
    ],
    outputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "safeTransferFrom",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "id", type: "uint256" },
      { name: "value", type: "uint256" },
      { name: "data", type: "bytes" },
    ],
    outputs: [],
  },
] as const;

/* ---------------------------------- ERC-20 ---------------------------------- */
export const erc20Abi = [
  {
    type: "function",
    stateMutability: "view",
    name: "decimals",
    inputs: [],
    outputs: [{ name: "", type: "uint8" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "symbol",
    inputs: [],
    outputs: [{ name: "", type: "string" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "balanceOf",
    inputs: [{ name: "account", type: "address" }],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    name: "allowance",
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" },
    ],
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "approve",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    outputs: [{ name: "", type: "bool" }],
  },
] as const;


export const erc1155ProxyAbi = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    name: "func_301JL5R",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "amount", type: "uint256" },
      { name: "token", type: "address" },    // IERC1155 contract address
      { name: "tokenId", type: "uint256" },  // ERC1155 token ID
      { name: "data", type: "bytes" },       // Transfer data
    ],
    outputs: [],
  },
  {
    type: "error",
    name: "ERC1155ProxyBadSelector",
    inputs: [],
  },
] as const;

export const lopV4Abi: any = [
  {
    inputs: [{ internalType: "contract IWETH", name: "weth", type: "address" }],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "AdvanceEpochFailed", type: "error" },
  { inputs: [], name: "ArbitraryStaticCallFailed", type: "error" },
  { inputs: [], name: "BadCurveSwapSelector", type: "error" },
  { inputs: [], name: "BadPool", type: "error" },
  { inputs: [], name: "BadSignature", type: "error" },
  { inputs: [], name: "BitInvalidatedOrder", type: "error" },
  { inputs: [], name: "ETHTransferFailed", type: "error" },
  { inputs: [], name: "ETHTransferFailed", type: "error" },
  { inputs: [], name: "EnforcedPause", type: "error" },
  {
    inputs: [],
    name: "EpochManagerAndBitInvalidatorsAreIncompatible",
    type: "error",
  },
  { inputs: [], name: "EthDepositRejected", type: "error" },
  { inputs: [], name: "ExpectedPause", type: "error" },
  { inputs: [], name: "InsufficientBalance", type: "error" },
  { inputs: [], name: "InvalidMsgValue", type: "error" },
  { inputs: [], name: "InvalidMsgValue", type: "error" },
  { inputs: [], name: "InvalidPermit2Transfer", type: "error" },
  { inputs: [], name: "InvalidShortString", type: "error" },
  { inputs: [], name: "InvalidatedOrder", type: "error" },
  { inputs: [], name: "MakingAmountTooLow", type: "error" },
  { inputs: [], name: "MismatchArraysLengths", type: "error" },
  { inputs: [], name: "OrderExpired", type: "error" },
  {
    inputs: [],
    name: "OrderIsNotSuitableForMassInvalidation",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "owner", type: "address" }],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  { inputs: [], name: "PartialFillNotAllowed", type: "error" },
  { inputs: [], name: "Permit2TransferAmountTooHigh", type: "error" },
  { inputs: [], name: "PredicateIsNotTrue", type: "error" },
  { inputs: [], name: "PrivateOrder", type: "error" },
  { inputs: [], name: "ReentrancyDetected", type: "error" },
  { inputs: [], name: "RemainingInvalidatedOrder", type: "error" },
  { inputs: [], name: "ReservesCallFailed", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "result", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
    ],
    name: "ReturnAmountIsNotEnough",
    type: "error",
  },
  { inputs: [], name: "SafeTransferFailed", type: "error" },
  { inputs: [], name: "SafeTransferFromFailed", type: "error" },
  {
    inputs: [
      { internalType: "bool", name: "success", type: "bool" },
      { internalType: "bytes", name: "res", type: "bytes" },
    ],
    name: "SimulationResults",
    type: "error",
  },
  {
    inputs: [{ internalType: "string", name: "str", type: "string" }],
    name: "StringTooLong",
    type: "error",
  },
  { inputs: [], name: "SwapWithZeroAmount", type: "error" },
  { inputs: [], name: "TakingAmountExceeded", type: "error" },
  { inputs: [], name: "TakingAmountTooHigh", type: "error" },
  { inputs: [], name: "TransferFromMakerToTakerFailed", type: "error" },
  { inputs: [], name: "TransferFromTakerToMakerFailed", type: "error" },
  { inputs: [], name: "WrongSeriesNonce", type: "error" },
  { inputs: [], name: "ZeroAddress", type: "error" },
  { inputs: [], name: "ZeroMinReturn", type: "error" },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "maker", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "slotIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slotValue",
        type: "uint256",
      },
    ],
    name: "BitInvalidatorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "series",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newEpoch",
        type: "uint256",
      },
    ],
    name: "EpochIncreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "remainingAmount",
        type: "uint256",
      },
    ],
    name: "OrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "address", name: "account", type: "address" },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "address", name: "account", type: "address" },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      { internalType: "uint96", name: "series", type: "uint96" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "advanceEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "offsets", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "and",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "target", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "arbitraryStaticCall",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "maker", type: "address" },
      { internalType: "uint256", name: "slot", type: "uint256" },
    ],
    name: "bitInvalidatorForOrder",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
      { internalType: "uint256", name: "additionalMask", type: "uint256" },
    ],
    name: "bitsInvalidateForOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
      { internalType: "bytes32", name: "orderHash", type: "bytes32" },
    ],
    name: "cancelOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MakerTraits[]", name: "makerTraits", type: "uint256[]" },
      { internalType: "bytes32[]", name: "orderHashes", type: "bytes32[]" },
    ],
    name: "cancelOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "predicate", type: "bytes" }],
    name: "checkPredicate",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClipperExchange",
        name: "clipperExchange",
        type: "address",
      },
      { internalType: "Address", name: "srcToken", type: "uint256" },
      { internalType: "contract IERC20", name: "dstToken", type: "address" },
      { internalType: "uint256", name: "inputAmount", type: "uint256" },
      { internalType: "uint256", name: "outputAmount", type: "uint256" },
      { internalType: "uint256", name: "goodUntil", type: "uint256" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "vs", type: "bytes32" },
    ],
    name: "clipperSwap",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IClipperExchange",
        name: "clipperExchange",
        type: "address",
      },
      { internalType: "address payable", name: "recipient", type: "address" },
      { internalType: "Address", name: "srcToken", type: "uint256" },
      { internalType: "contract IERC20", name: "dstToken", type: "address" },
      { internalType: "uint256", name: "inputAmount", type: "uint256" },
      { internalType: "uint256", name: "outputAmount", type: "uint256" },
      { internalType: "uint256", name: "goodUntil", type: "uint256" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "vs", type: "bytes32" },
    ],
    name: "clipperSwapTo",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "inCoin", type: "address" },
      { internalType: "uint256", name: "dx", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
    ],
    name: "curveSwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { internalType: "bytes1", name: "fields", type: "bytes1" },
      { internalType: "string", name: "name", type: "string" },
      { internalType: "string", name: "version", type: "string" },
      { internalType: "uint256", name: "chainId", type: "uint256" },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      { internalType: "bytes32", name: "salt", type: "bytes32" },
      { internalType: "uint256[]", name: "extensions", type: "uint256[]" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "maker", type: "address" },
      { internalType: "uint96", name: "series", type: "uint96" },
    ],
    name: "epoch",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "maker", type: "address" },
      { internalType: "uint256", name: "series", type: "uint256" },
      { internalType: "uint256", name: "makerEpoch", type: "uint256" },
    ],
    name: "epochEquals",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "value", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "eq",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "uint256", name: "salt", type: "uint256" },
          { internalType: "Address", name: "maker", type: "uint256" },
          { internalType: "Address", name: "receiver", type: "uint256" },
          { internalType: "Address", name: "makerAsset", type: "uint256" },
          { internalType: "Address", name: "takerAsset", type: "uint256" },
          { internalType: "uint256", name: "makingAmount", type: "uint256" },
          { internalType: "uint256", name: "takingAmount", type: "uint256" },
          { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      { internalType: "bytes", name: "signature", type: "bytes" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "TakerTraits", name: "takerTraits", type: "uint256" },
    ],
    name: "fillContractOrder",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bytes32", name: "", type: "bytes32" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "uint256", name: "salt", type: "uint256" },
          { internalType: "Address", name: "maker", type: "uint256" },
          { internalType: "Address", name: "receiver", type: "uint256" },
          { internalType: "Address", name: "makerAsset", type: "uint256" },
          { internalType: "Address", name: "takerAsset", type: "uint256" },
          { internalType: "uint256", name: "makingAmount", type: "uint256" },
          { internalType: "uint256", name: "takingAmount", type: "uint256" },
          { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      { internalType: "bytes", name: "signature", type: "bytes" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "TakerTraits", name: "takerTraits", type: "uint256" },
      { internalType: "bytes", name: "args", type: "bytes" },
    ],
    name: "fillContractOrderArgs",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bytes32", name: "", type: "bytes32" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "uint256", name: "salt", type: "uint256" },
          { internalType: "Address", name: "maker", type: "uint256" },
          { internalType: "Address", name: "receiver", type: "uint256" },
          { internalType: "Address", name: "makerAsset", type: "uint256" },
          { internalType: "Address", name: "takerAsset", type: "uint256" },
          { internalType: "uint256", name: "makingAmount", type: "uint256" },
          { internalType: "uint256", name: "takingAmount", type: "uint256" },
          { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "vs", type: "bytes32" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "TakerTraits", name: "takerTraits", type: "uint256" },
    ],
    name: "fillOrder",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bytes32", name: "", type: "bytes32" },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "uint256", name: "salt", type: "uint256" },
          { internalType: "Address", name: "maker", type: "uint256" },
          { internalType: "Address", name: "receiver", type: "uint256" },
          { internalType: "Address", name: "makerAsset", type: "uint256" },
          { internalType: "Address", name: "takerAsset", type: "uint256" },
          { internalType: "uint256", name: "makingAmount", type: "uint256" },
          { internalType: "uint256", name: "takingAmount", type: "uint256" },
          { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "vs", type: "bytes32" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "TakerTraits", name: "takerTraits", type: "uint256" },
      { internalType: "bytes", name: "args", type: "bytes" },
    ],
    name: "fillOrderArgs",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "bytes32", name: "", type: "bytes32" },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "value", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "gt",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "uint256", name: "salt", type: "uint256" },
          { internalType: "Address", name: "maker", type: "uint256" },
          { internalType: "Address", name: "receiver", type: "uint256" },
          { internalType: "Address", name: "makerAsset", type: "uint256" },
          { internalType: "Address", name: "takerAsset", type: "uint256" },
          { internalType: "uint256", name: "makingAmount", type: "uint256" },
          { internalType: "uint256", name: "takingAmount", type: "uint256" },
          { internalType: "MakerTraits", name: "makerTraits", type: "uint256" },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "hashOrder",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint96", name: "series", type: "uint96" }],
    name: "increaseEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "value", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "lt",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "data", type: "bytes" }],
    name: "not",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "offsets", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "or",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  { inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable", type: "function" },
  {
    inputs: [],
    name: "paused",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes", name: "permit", type: "bytes" },
      { internalType: "bytes", name: "action", type: "bytes" },
    ],
    name: "permitAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "maker", type: "address" },
      { internalType: "bytes32", name: "orderHash", type: "bytes32" },
    ],
    name: "rawRemainingInvalidatorForOrder",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "maker", type: "address" },
      { internalType: "bytes32", name: "orderHash", type: "bytes32" },
    ],
    name: "remainingInvalidatorForOrder",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "rescueFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "target", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "simulate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "contract IAggregationExecutor", name: "executor", type: "address" },
      {
        internalType: "struct GenericRouter.SwapDescription",
        name: "desc",
        type: "tuple",
        components: [
          { internalType: "contract IERC20", name: "srcToken", type: "address" },
          { internalType: "contract IERC20", name: "dstToken", type: "address" },
          { internalType: "address payable", name: "srcReceiver", type: "address" },
          { internalType: "address payable", name: "dstReceiver", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          { internalType: "uint256", name: "minReturnAmount", type: "uint256" },
          { internalType: "uint256", name: "flags", type: "uint256" },
        ],
      },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "swap",
    outputs: [
      { internalType: "uint256", name: "returnAmount", type: "uint256" },
      { internalType: "uint256", name: "spentAmount", type: "uint256" },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "int256", name: "amount0Delta", type: "int256" },
      { internalType: "int256", name: "amount1Delta", type: "int256" },
      { internalType: "bytes", name: "", type: "bytes" },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
    ],
    name: "unoswap",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
      { internalType: "Address", name: "dex2", type: "uint256" },
    ],
    name: "unoswap2",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
      { internalType: "Address", name: "dex2", type: "uint256" },
      { internalType: "Address", name: "dex3", type: "uint256" },
    ],
    name: "unoswap3",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "to", type: "uint256" },
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
    ],
    name: "unoswapTo",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "to", type: "uint256" },
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
      { internalType: "Address", name: "dex2", type: "uint256" },
    ],
    name: "unoswapTo2",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "Address", name: "to", type: "uint256" },
      { internalType: "Address", name: "token", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minReturn", type: "uint256" },
      { internalType: "Address", name: "dex", type: "uint256" },
      { internalType: "Address", name: "dex2", type: "uint256" },
      { internalType: "Address", name: "dex3", type: "uint256" },
    ],
    name: "unoswapTo3",
    outputs: [{ internalType: "uint256", name: "returnAmount", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  { inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable", type: "function" },
  { stateMutability: "payable", type: "receive" },
] as const;

/* ------------------------------- Convenience ------------------------------- */
export const ADDRESSES = {
  chainId: CHAIN_ID,
  rpcUrl: RPC_URL,
  explorer: EXPLORER_URL,
  oneInchLopV4: LOP_V4_GNOSIS,
  vault: VAULT_ADDRESS,
  callToken1155: CALLTOKEN_ADDRESS,
  erc1155Proxy: ERC1155_PROXY_ADDRESS,
  oracleGnoWx: ORACLE_GNO_WXDAI,
  tokens: TOKEN_ADDRESSES,
} as const;